// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AgeLimit")
                        .HasColumnType("tinyint");

                    b.Property<short>("CountPage")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Duplicate")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN_10")
                        .HasColumnType("char(10)");

                    b.Property<string>("ISBN_13")
                        .HasColumnType("char(13)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("Date");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Model.Entities.Interpreter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Interpreters");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.AuthorBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.InterpreterBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IntepreterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InterpreterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "IntepreterId");

                    b.HasIndex("InterpreterId");

                    b.ToTable("InterpreterBooks");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.PainterBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PainterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "PainterId");

                    b.HasIndex("PainterId");

                    b.ToTable("PainterBooks");
                });

            modelBuilder.Entity("Model.Entities.Painter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.Property<Guid?>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Painters");
                });

            modelBuilder.Entity("Model.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("Model.Entities.References.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");
                });

            modelBuilder.Entity("Model.Entities.References.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Model.Entities.References.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Model.Entities.References.PainterStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PainterStyles");
                });

            modelBuilder.Entity("Model.Entities.References.WorkShedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Weekday")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("WorkShedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("905d9ed8-0bd5-402a-be16-73c021176c78"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("da0a5d81-8a06-495e-be79-71cc5973b2b7"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)2
                        },
                        new
                        {
                            Id = new Guid("39e04286-1a37-4e7e-b00e-5b255b83fc10"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("b3e031f0-73c0-4d37-94a9-bd82339882d8"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("d549b3f0-775b-45af-b425-d207b5afb637"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("e1137b08-edf1-4159-b0a1-0484e28eac72"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)6
                        },
                        new
                        {
                            Id = new Guid("e416bca8-0534-42a2-9002-46b3bf016d44"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)7
                        },
                        new
                        {
                            Id = new Guid("d8fa07de-df5d-46e6-abe1-eb3552f083f4"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("f99f1587-e3b0-4ac7-8b97-a552b2bb9423"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)2
                        },
                        new
                        {
                            Id = new Guid("2b832724-0faa-4e71-9af5-373052d6c368"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("d5d62b05-72c2-45ec-841a-3f1fb3c05938"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("17a51ded-63d8-4eb7-9286-cced1e0a03ce"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("e750f5d4-b698-4196-8337-4551a672a4f4"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("5bab269a-e2be-45d1-a867-ea7295bb6671"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("f4c53bb7-ff07-4be6-8657-72c5e54ed18d"),
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("49efd4d4-624f-4a55-bf22-198b9e6924ac"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("39dc4a1a-0bfc-4c7c-8d6b-77274d0d2947"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)6
                        });
                });

            modelBuilder.Entity("Model.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            Address = "Советская 65",
                            Name = "Книжная штучка"
                        },
                        new
                        {
                            Id = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            Address = "Мира 22",
                            Name = "Большая закладка"
                        },
                        new
                        {
                            Id = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            Address = "Маркса проспект 3",
                            Name = "Скрытая обложка"
                        },
                        new
                        {
                            Id = new Guid("27cf46b3-a2aa-4351-af82-e33f36f1c553"),
                            Address = "Заельцовская 123",
                            Name = "Глубокий кошелек"
                        },
                        new
                        {
                            Id = new Guid("06c5d83e-ac7f-4c4c-8ad5-79bb9e914ef8"),
                            Address = "Красный проспект 234",
                            Name = "Звенящий брелок"
                        },
                        new
                        {
                            Id = new Guid("905d9ed8-0bd5-402a-be16-73c021176c78"),
                            Address = "Революции 89",
                            Name = "Теплый носок"
                        });
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.HasOne("Model.Entities.References.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId");

                    b.HasOne("Model.Entities.References.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Model.Entities.References.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Model.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.AuthorBook", b =>
                {
                    b.HasOne("Model.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.JoinTables.InterpreterBook", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Interpreter", "Interpreter")
                        .WithMany("InterpeterBooks")
                        .HasForeignKey("InterpreterId");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.PainterBook", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany("PainterBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Painter", "Painter")
                        .WithMany("PainterBooks")
                        .HasForeignKey("PainterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Painter", b =>
                {
                    b.HasOne("Model.Entities.References.PainterStyle", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");
                });

            modelBuilder.Entity("Model.Entities.References.WorkShedule", b =>
                {
                    b.HasOne("Model.Entities.Shop", "Shop")
                        .WithMany("WorkShedule")
                        .HasForeignKey("ShopId");
                });
#pragma warning restore 612, 618
        }
    }
}
