// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(BookContext))]
    [Migration("20200723091124_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6be1a08c-550c-447f-bb67-d1e1f5275dbf"),
                            Age = (byte)91,
                            Description = "В 1937 году Брэдбери вступил в лос-анджелесскую «Лигу научных фантастов», которая была одним из многих объединений молодых писателей, активно возникавших в возрождающейся после Великой Депрессии Америке.",
                            Name = "Рэй Дуглас Брэдбери"
                        },
                        new
                        {
                            Id = new Guid("d1ecb608-293b-40df-bcaf-02ada7abf05a"),
                            Age = (byte)46,
                            Description = "Начиная с основанной на автобиографическом материале повести «Фунты лиха в Париже и Лондоне» (1933), публиковался под псевдонимом «Джордж Оруэлл», взятом в честь реки Оруэлл, одного из его любимых мест в Англии.",
                            Name = "Джордж Оруэлл"
                        },
                        new
                        {
                            Id = new Guid("1157dee0-8f67-43d2-8aa1-3d7a2272e3d7"),
                            Age = (byte)68,
                            Description = "Во время своего второго пребывания в австралийской тюрьме Робертс начинает работу над романом «Шантарам». Дважды рукописи уничтожались тюремными надзирателями.",
                            Name = "Грегори Дэвид Робертс"
                        },
                        new
                        {
                            Id = new Guid("11476765-e104-4900-bea9-17100d084ed6"),
                            Age = (byte)48,
                            Description = "В 1923 году Булгаков вступил во Всероссийский союз писателей. В 1924 году он познакомился с недавно вернувшейся из-за границы Любовью Евгеньевной Белозерской (1895—1987), которая в 1925 году стала его женой.",
                            Name = "Михаил Афанасьевич Булгаков"
                        },
                        new
                        {
                            Id = new Guid("6b6f819c-2a9d-4ef9-92dd-55f69097f36c"),
                            Age = (byte)72,
                            Description = "В 1929 году вышел в свет роман «На Западном фронте без перемен», описывающий жестокость войны с точки зрения 20-летнего солдата. Роман мгновенно стал настоящей сенсацией. За год было продано полтора миллиона экземпляров. Позднее он был переведён на 36 языков мира.",
                            Name = "Эрих Мария Ремарк"
                        },
                        new
                        {
                            Id = new Guid("bc72faf4-f5ea-41b4-b85b-835731bdb0f7"),
                            Age = (byte)44,
                            Description = "В апреле 1935 года, в качестве корреспондента газеты «Пари-Суар», Сент-Экзюпери посетил СССР и описал этот визит в пяти очерках. Очерк «Преступление и наказание перед лицом советского правосудия» стал одним из первых произведений писателей Запада, в котором делалась попытка осмыслить сталинизм.",
                            Name = "Антуан де Сент-Экзюпери"
                        });
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("AgeLimit")
                        .HasColumnType("tinyint");

                    b.Property<short>("CountPage")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("CoverTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<short>("Duplicate")
                        .HasColumnType("smallint");

                    b.Property<string>("Format")
                        .HasColumnType("varchar(30)");

                    b.Property<Guid?>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ISBN_13")
                        .HasColumnType("char(17)");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(8,2)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("Date");

                    b.Property<Guid?>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<short>("Weight")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CoverTypeId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa585855-0feb-418c-acc5-6e98e20b972a"),
                            AgeLimit = (byte)16,
                            CountPage = (short)350,
                            CoverTypeId = new Guid("f3ff3c04-893a-40bc-9854-1c2ba98c8265"),
                            Description = "О дивный новый мир - изысканная и остроумная антиутопия о генетически программируемом обществе потребления, в котором разворачивается трагическая история Дикаря - Гамлета этого мира.",
                            Duplicate = (short)5000,
                            Format = "18 x 11.6 x 1.9",
                            GenreId = new Guid("cfb89ffe-f0c9-4821-a499-2fcaf38fca16"),
                            ISBN_13 = "978-5-17-080085-8",
                            LanguageId = new Guid("67cbe600-e220-42c5-b526-6fe821476273"),
                            Name = "О дивный новый мир",
                            Price = 212m,
                            PublishDate = new DateTime(2014, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("fe0f989d-1eb9-467e-8fbf-c783d70171bc"),
                            Weight = (short)200
                        },
                        new
                        {
                            Id = new Guid("5628b2d6-4ed2-4b3e-b71f-6764a2489b25"),
                            AgeLimit = (byte)16,
                            CountPage = (short)220,
                            CoverTypeId = new Guid("56d180ca-f9bd-4dad-87ef-af334f636be1"),
                            Description = "Алхимик» – самый известный роман бразильского писателя Пауло Коэльо, любимая книга миллионов людей во всем мире.",
                            Duplicate = (short)10000,
                            Format = "18 x 11.5 x 1.3",
                            GenreId = new Guid("e8e4d3c5-1bd3-44f2-9120-5c39e44c553f"),
                            ISBN_13 = "978-5-17-087921-2",
                            LanguageId = new Guid("67cbe600-e220-42c5-b526-6fe821476273"),
                            Name = "Алхимик",
                            Price = 250m,
                            PublishDate = new DateTime(2015, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("5ec79a9a-93ac-4956-861e-ccfa8696e13d"),
                            Weight = (short)160
                        },
                        new
                        {
                            Id = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            AgeLimit = (byte)18,
                            CountPage = (short)320,
                            CoverTypeId = new Guid("fc4519df-a67d-4686-904b-4ee105f37d22"),
                            Description = "Андре Асимана называют одним из важнейших романистов современности. «Найди меня» — долгожданное продолжение его бестселлера «Назови меня своим именем», покорившего миллионы читателей во всем мире.",
                            Duplicate = (short)15000,
                            Format = "21 x 14 x 1.9",
                            GenreId = new Guid("e36af307-b334-4074-91b4-c2e14d043743"),
                            ISBN_13 = "978-5-6042628-9-4",
                            LanguageId = new Guid("08fee749-b64b-4815-823a-b36b1ab6371e"),
                            Name = "Найди меня",
                            Price = 363m,
                            PublishDate = new DateTime(2020, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("6a8c18f9-b8c3-4964-8494-81c26d6af209"),
                            Weight = (short)330
                        },
                        new
                        {
                            Id = new Guid("7db924d8-00a7-4b46-9e31-73d95c38eb31"),
                            AgeLimit = (byte)18,
                            CountPage = (short)400,
                            CoverTypeId = new Guid("47b06aac-5e4a-4541-b1b6-dcb5ec8f69dc"),
                            Description = "В детстве маленького Мики было всё, как у обычных детей: любимые герои, каши по утрам, дни рождения, скучные линейки в школе и сочинения на заданные темы.",
                            Duplicate = (short)2000,
                            Format = "21 x 14 x 3.2",
                            GenreId = new Guid("29c1b4ad-05e6-4752-ba67-47dc45a0fe46"),
                            ISBN_13 = "978-5-6043606-3-7",
                            LanguageId = new Guid("f1f085b5-689c-4675-ad84-4f47a5d0883e"),
                            Name = "Дни нашей жизни",
                            Price = 330m,
                            PublishDate = new DateTime(2020, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("6a8c18f9-b8c3-4964-8494-81c26d6af209"),
                            Weight = (short)380
                        },
                        new
                        {
                            Id = new Guid("1ffa9b7c-e021-4084-a14b-35839b9cc9d2"),
                            AgeLimit = (byte)16,
                            CountPage = (short)318,
                            CoverTypeId = new Guid("07b46856-7089-4d71-a07a-40068f79ff2d"),
                            Description = "Своеобразный антипод второй великой антиутопии XX века - О дивный новый мир Олдоса Хаксли. Что, в сущности, страшнее: доведенное до абсурда общество потребления - или доведенное до абсолюта общество идеи? По Оруэллу, нет и не может быть ничего ужаснее тотальной несвободы...",
                            Duplicate = (short)7000,
                            Format = "18.1 x 11.7 x 2",
                            GenreId = new Guid("cfb89ffe-f0c9-4821-a499-2fcaf38fca16"),
                            ISBN_13 = "978-5-17-080115-2",
                            LanguageId = new Guid("67cbe600-e220-42c5-b526-6fe821476273"),
                            Name = "1984",
                            Price = 203m,
                            PublishDate = new DateTime(2014, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("b9af4688-e273-4676-a92a-656023a2d216"),
                            Weight = (short)230
                        },
                        new
                        {
                            Id = new Guid("d22d44a7-e987-4f8f-8cb2-0768cc6199c6"),
                            AgeLimit = (byte)14,
                            CountPage = (short)384,
                            CoverTypeId = new Guid("33aa3511-8c70-4e19-9719-321d4b79f588"),
                            Description = "На первый взгляд Уве — самый угрюмый человек на свете. Он, как и многие из нас, полагает, что его окружают преимущественно идиоты — соседи, которые неправильно паркуют свои машины; продавцы в магазине, говорящие на птичьем языке; бюрократы, портящие жизнь нормальным людям.",
                            Duplicate = (short)5000,
                            Format = "20.5 x 13 x 2.4",
                            GenreId = new Guid("7bb337b5-6b47-4613-8657-6f78506fe117"),
                            ISBN_13 = "978-5-905891-97-7",
                            LanguageId = new Guid("90b9df3b-581f-4f92-adee-251630a72a9e"),
                            Name = "Вторая жизнь Уве",
                            Price = 406m,
                            PublishDate = new DateTime(2017, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("3f755440-89bf-4335-99a7-db1d9226d666"),
                            Weight = (short)400
                        },
                        new
                        {
                            Id = new Guid("7d1e69bc-f0b2-4bbd-8d87-e2fc2bca53ac"),
                            AgeLimit = (byte)12,
                            CountPage = (short)960,
                            CoverTypeId = new Guid("56d180ca-f9bd-4dad-87ef-af334f636be1"),
                            Description = "На окраине города, среди стандартных новостроек, стоит Серый Дом, в котором живут Сфинкс, Слепой, Лорд, Табаки, Македонский, Черный и многие другие.",
                            Duplicate = (short)15000,
                            Format = "22 x 15 x 5",
                            GenreId = new Guid("7cf21233-4caf-4902-bcc1-85a677bf1c59"),
                            ISBN_13 = "978-5-904584-69-6",
                            LanguageId = new Guid("8d13a346-389b-48b3-9299-a565bf2a6658"),
                            Name = "Дом, в котором…",
                            Price = 605m,
                            PublishDate = new DateTime(2016, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("3f755440-89bf-4335-99a7-db1d9226d666"),
                            Weight = (short)1050
                        },
                        new
                        {
                            Id = new Guid("7c7ef3fc-b918-41d5-9e9d-e0549b0f42bc"),
                            AgeLimit = (byte)6,
                            CountPage = (short)544,
                            CoverTypeId = new Guid("56d180ca-f9bd-4dad-87ef-af334f636be1"),
                            Description = "Одна из величайших книг ХХ века. Странная, поэтичная, причудливая история города Макондо, затерянного где-то в джунглях, – от сотворения до упадка. История рода Буэндиа – семьи, в которой чудеса столь повседневны, что на них даже не обращают внимания.",
                            Duplicate = (short)-15536,
                            Format = "18 x 11.5 x 2.6",
                            GenreId = new Guid("7fb2db94-ebb6-4235-a3e5-182e735b8bf8"),
                            ISBN_13 = "978-5-17-090831-8",
                            LanguageId = new Guid("02a20c75-b5ce-4c81-8fd4-02ba505aca1a"),
                            Name = "Сто лет одиночества",
                            Price = 377m,
                            PublishDate = new DateTime(2015, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("94834ccb-a363-4566-bf2c-d73ff9ba958f"),
                            Weight = (short)330
                        },
                        new
                        {
                            Id = new Guid("f0317cfb-e110-4b92-97b9-a52595cefccd"),
                            AgeLimit = (byte)6,
                            CountPage = (short)320,
                            CoverTypeId = new Guid("fc4519df-a67d-4686-904b-4ee105f37d22"),
                            Description = "Сорок лет назад это считалось фантастикой. Сорок лет назад это читалось как фантастика. Исследующая и расширяющая границы жанра, жадно впитывающая всевозможные новейшие веяния, примеряющая общечеловеческое лицо, отважно игнорирующая каинову печать жанрового гетто.",
                            Duplicate = (short)3000,
                            Format = "18 x 11.5 x 1.4",
                            GenreId = new Guid("7fb2db94-ebb6-4235-a3e5-182e735b8bf8"),
                            ISBN_13 = "978-5-699-41332-4",
                            LanguageId = new Guid("8d13a346-389b-48b3-9299-a565bf2a6658"),
                            Name = "Цветы для Элджернона",
                            Price = 220m,
                            PublishDate = new DateTime(2010, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("94834ccb-a363-4566-bf2c-d73ff9ba958f"),
                            Weight = (short)170
                        },
                        new
                        {
                            Id = new Guid("4b9c14fd-7788-4c89-b778-459ee7a4415b"),
                            AgeLimit = (byte)15,
                            CountPage = (short)436,
                            CoverTypeId = new Guid("f586ce45-08d0-46a5-931a-7a10fdab654d"),
                            Description = "В первой части читатели знакомятся с главными героями, гениальными предпринимателями, которым противостоят их антиподы - бездарные государственные чиновники. Повествование начинается с вопроса: кто такой Джон Голт? И на этот вопрос будут искать ответ герои романа и его читатели.",
                            Duplicate = (short)17000,
                            Format = "21.7 x 14.8 x 2",
                            GenreId = new Guid("6aed17e9-b4f9-4997-b115-6da1dfdcca80"),
                            ISBN_13 = "978-5-9614-6742-0",
                            LanguageId = new Guid("ae0cf116-c244-4997-93cd-f7760a93fe0f"),
                            Name = "Атлант расправил плечи (комплект из 3 книг)",
                            Price = 792m,
                            PublishDate = new DateTime(2018, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherId = new Guid("94834ccb-a363-4566-bf2c-d73ff9ba958f"),
                            Weight = (short)1700
                        });
                });

            modelBuilder.Entity("Model.Entities.Interpreter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Interpreters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9dfae902-8fd6-4551-be3a-3b8f5aa53bb8"),
                            Age = (byte)66,
                            Description = "Оригинальный поэт и переводчик разноликой, но всегда пылкой испанской поэзии, как нельзя лучше соответствующей его собственному пылкому темпераменту.",
                            Name = "Павел Грушко"
                        },
                        new
                        {
                            Id = new Guid("11b6c2ed-98fe-4322-93c6-50197766fd9f"),
                            Age = (byte)45,
                            Description = "Виднейший представитель Серебряного века, поэт-символист и пропагандист французских символистов, всё-таки как переводчик больше всего запомнился переложением античных классиков.",
                            Name = "Иннокентий Анненский"
                        },
                        new
                        {
                            Id = new Guid("a549b273-8114-420c-ae56-e9d9163c1668"),
                            Age = (byte)76,
                            Description = "В отличие от Мандельштама и Цветаевой, к переводу обращавшихся пылко и стихийно, Пастернак был весьма трудолюбивым и продуктивным переводчиком.",
                            Name = "Борис Пастернак"
                        },
                        new
                        {
                            Id = new Guid("9a46e40f-57dc-465c-8d2b-67edf3cf5b4e"),
                            Age = (byte)53,
                            Description = "Именно с Раисой Яковлевной Ковалевой, писавшей под псевдонимом Рита Райт, связано возникновение литературного анекдота (зафиксированного или придуманного Довлатовым) о «писателях, сильно выигрывающих в переводе».",
                            Name = "Рита Райт-Ковалева"
                        },
                        new
                        {
                            Id = new Guid("fec297d0-8287-42f3-81bd-311ae1b0c6c6"),
                            Age = (byte)75,
                            Description = "Известный писатель уверял, что взялся за перевод «Рэгтайма» Доктороу (вышел в 1976 году) только для того, чтобы подтянуть свой английский; но, кажется, всё-таки несколько лукавил.",
                            Name = "Василий Аксёнов"
                        });
                });

            modelBuilder.Entity("Model.Entities.JoinTables.AuthorBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("AuthorBooks");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("aa585855-0feb-418c-acc5-6e98e20b972a"),
                            AuthorId = new Guid("6be1a08c-550c-447f-bb67-d1e1f5275dbf")
                        },
                        new
                        {
                            BookId = new Guid("5628b2d6-4ed2-4b3e-b71f-6764a2489b25"),
                            AuthorId = new Guid("6be1a08c-550c-447f-bb67-d1e1f5275dbf")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            AuthorId = new Guid("6be1a08c-550c-447f-bb67-d1e1f5275dbf")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            AuthorId = new Guid("d1ecb608-293b-40df-bcaf-02ada7abf05a")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            AuthorId = new Guid("1157dee0-8f67-43d2-8aa1-3d7a2272e3d7")
                        },
                        new
                        {
                            BookId = new Guid("7db924d8-00a7-4b46-9e31-73d95c38eb31"),
                            AuthorId = new Guid("6b6f819c-2a9d-4ef9-92dd-55f69097f36c")
                        },
                        new
                        {
                            BookId = new Guid("1ffa9b7c-e021-4084-a14b-35839b9cc9d2"),
                            AuthorId = new Guid("6b6f819c-2a9d-4ef9-92dd-55f69097f36c")
                        },
                        new
                        {
                            BookId = new Guid("d22d44a7-e987-4f8f-8cb2-0768cc6199c6"),
                            AuthorId = new Guid("6b6f819c-2a9d-4ef9-92dd-55f69097f36c")
                        },
                        new
                        {
                            BookId = new Guid("7d1e69bc-f0b2-4bbd-8d87-e2fc2bca53ac"),
                            AuthorId = new Guid("bc72faf4-f5ea-41b4-b85b-835731bdb0f7")
                        },
                        new
                        {
                            BookId = new Guid("7c7ef3fc-b918-41d5-9e9d-e0549b0f42bc"),
                            AuthorId = new Guid("bc72faf4-f5ea-41b4-b85b-835731bdb0f7")
                        },
                        new
                        {
                            BookId = new Guid("f0317cfb-e110-4b92-97b9-a52595cefccd"),
                            AuthorId = new Guid("bc72faf4-f5ea-41b4-b85b-835731bdb0f7")
                        },
                        new
                        {
                            BookId = new Guid("4b9c14fd-7788-4c89-b778-459ee7a4415b"),
                            AuthorId = new Guid("bc72faf4-f5ea-41b4-b85b-835731bdb0f7")
                        });
                });

            modelBuilder.Entity("Model.Entities.JoinTables.InterpreterBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InterpreterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "InterpreterId");

                    b.HasIndex("InterpreterId");

                    b.ToTable("InterpreterBooks");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("aa585855-0feb-418c-acc5-6e98e20b972a"),
                            InterpreterId = new Guid("9dfae902-8fd6-4551-be3a-3b8f5aa53bb8")
                        },
                        new
                        {
                            BookId = new Guid("5628b2d6-4ed2-4b3e-b71f-6764a2489b25"),
                            InterpreterId = new Guid("9dfae902-8fd6-4551-be3a-3b8f5aa53bb8")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            InterpreterId = new Guid("11b6c2ed-98fe-4322-93c6-50197766fd9f")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            InterpreterId = new Guid("a549b273-8114-420c-ae56-e9d9163c1668")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            InterpreterId = new Guid("9a46e40f-57dc-465c-8d2b-67edf3cf5b4e")
                        },
                        new
                        {
                            BookId = new Guid("7db924d8-00a7-4b46-9e31-73d95c38eb31"),
                            InterpreterId = new Guid("a549b273-8114-420c-ae56-e9d9163c1668")
                        },
                        new
                        {
                            BookId = new Guid("1ffa9b7c-e021-4084-a14b-35839b9cc9d2"),
                            InterpreterId = new Guid("a549b273-8114-420c-ae56-e9d9163c1668")
                        },
                        new
                        {
                            BookId = new Guid("d22d44a7-e987-4f8f-8cb2-0768cc6199c6"),
                            InterpreterId = new Guid("9a46e40f-57dc-465c-8d2b-67edf3cf5b4e")
                        },
                        new
                        {
                            BookId = new Guid("7d1e69bc-f0b2-4bbd-8d87-e2fc2bca53ac"),
                            InterpreterId = new Guid("9a46e40f-57dc-465c-8d2b-67edf3cf5b4e")
                        },
                        new
                        {
                            BookId = new Guid("7c7ef3fc-b918-41d5-9e9d-e0549b0f42bc"),
                            InterpreterId = new Guid("fec297d0-8287-42f3-81bd-311ae1b0c6c6")
                        },
                        new
                        {
                            BookId = new Guid("f0317cfb-e110-4b92-97b9-a52595cefccd"),
                            InterpreterId = new Guid("fec297d0-8287-42f3-81bd-311ae1b0c6c6")
                        },
                        new
                        {
                            BookId = new Guid("4b9c14fd-7788-4c89-b778-459ee7a4415b"),
                            InterpreterId = new Guid("fec297d0-8287-42f3-81bd-311ae1b0c6c6")
                        });
                });

            modelBuilder.Entity("Model.Entities.JoinTables.PainterBook", b =>
                {
                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PainterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookId", "PainterId");

                    b.HasIndex("PainterId");

                    b.ToTable("PainterBooks");

                    b.HasData(
                        new
                        {
                            BookId = new Guid("aa585855-0feb-418c-acc5-6e98e20b972a"),
                            PainterId = new Guid("b849554a-3b05-4aff-9f81-ac1a4abbfc01")
                        },
                        new
                        {
                            BookId = new Guid("5628b2d6-4ed2-4b3e-b71f-6764a2489b25"),
                            PainterId = new Guid("b849554a-3b05-4aff-9f81-ac1a4abbfc01")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            PainterId = new Guid("d18d0a39-9a5f-476f-8d52-bc0a23a371af")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            PainterId = new Guid("8e9093a9-8f64-4ef5-8d03-090c1ed062a5")
                        },
                        new
                        {
                            BookId = new Guid("8c038acd-17db-4554-a741-de98ca121256"),
                            PainterId = new Guid("549903f5-66ab-48e8-b126-8610c4bb08b9")
                        },
                        new
                        {
                            BookId = new Guid("7db924d8-00a7-4b46-9e31-73d95c38eb31"),
                            PainterId = new Guid("8e9093a9-8f64-4ef5-8d03-090c1ed062a5")
                        },
                        new
                        {
                            BookId = new Guid("1ffa9b7c-e021-4084-a14b-35839b9cc9d2"),
                            PainterId = new Guid("8e9093a9-8f64-4ef5-8d03-090c1ed062a5")
                        },
                        new
                        {
                            BookId = new Guid("d22d44a7-e987-4f8f-8cb2-0768cc6199c6"),
                            PainterId = new Guid("549903f5-66ab-48e8-b126-8610c4bb08b9")
                        },
                        new
                        {
                            BookId = new Guid("7d1e69bc-f0b2-4bbd-8d87-e2fc2bca53ac"),
                            PainterId = new Guid("549903f5-66ab-48e8-b126-8610c4bb08b9")
                        },
                        new
                        {
                            BookId = new Guid("7c7ef3fc-b918-41d5-9e9d-e0549b0f42bc"),
                            PainterId = new Guid("20035c22-62c5-4688-b21a-cff0007e871e")
                        },
                        new
                        {
                            BookId = new Guid("f0317cfb-e110-4b92-97b9-a52595cefccd"),
                            PainterId = new Guid("20035c22-62c5-4688-b21a-cff0007e871e")
                        },
                        new
                        {
                            BookId = new Guid("4b9c14fd-7788-4c89-b778-459ee7a4415b"),
                            PainterId = new Guid("14587f65-7b1c-4171-b0f0-bf707284710f")
                        });
                });

            modelBuilder.Entity("Model.Entities.Painter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Age")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(40)");

                    b.Property<Guid?>("StyleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StyleId");

                    b.ToTable("Painters");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b849554a-3b05-4aff-9f81-ac1a4abbfc01"),
                            Age = (byte)67,
                            Description = "Благодаря его картинам мировая живопись вышла на новый качественный уровень. Он двигался в сторону реализма, постигая законы перспективы и разбираясь в анатомическом строении человека.",
                            Name = "Леонардо да Винчи",
                            StyleId = new Guid("018c691d-5f4a-47fe-8fee-19d45877dabd")
                        },
                        new
                        {
                            Id = new Guid("d18d0a39-9a5f-476f-8d52-bc0a23a371af"),
                            Age = (byte)66,
                            Description = "Полулюди-полумутанты, громадные птицы и рыбы, невиданные растения и толпы обнаженных грешников… Всё это перемешано и сплетено в многофигурные композиции.",
                            Name = "Иероним Босх",
                            StyleId = new Guid("018c691d-5f4a-47fe-8fee-19d45877dabd")
                        },
                        new
                        {
                            Id = new Guid("8e9093a9-8f64-4ef5-8d03-090c1ed062a5"),
                            Age = (byte)37,
                            Description = "Самый знаменитый представитель Эпохи Возрождения поражает гармоничными композициями и лиризмом.",
                            Name = "Рафаэль Санти",
                            StyleId = new Guid("fe4bb701-b2c2-40b5-ae4e-4e46edad36d1")
                        },
                        new
                        {
                            Id = new Guid("549903f5-66ab-48e8-b126-8610c4bb08b9"),
                            Age = (byte)63,
                            Description = "Рембрандт изображал мир таким, какой он был. Без прикрас и лакировок. Но получалось у него это очень душевно.",
                            Name = "Рембрандт Ха́рменс ван Рейн",
                            StyleId = new Guid("6801a5c4-fc35-468d-884f-75af47a288d6")
                        },
                        new
                        {
                            Id = new Guid("20035c22-62c5-4688-b21a-cff0007e871e"),
                            Age = (byte)82,
                            Description = "Гойя начал свой творческий путь с юношеской пылкостью и идеализмом. Даже стал придворным художником при испанском дворе. Но вскоре пресытился жизнью, увидев алчность мира, тупость, ханжество.",
                            Name = "Франсиско Хосе де Гойя-и-Лусьентес",
                            StyleId = new Guid("27078d1d-666a-4827-8f61-2683ae305f4d")
                        },
                        new
                        {
                            Id = new Guid("14587f65-7b1c-4171-b0f0-bf707284710f"),
                            Age = (byte)82,
                            Description = "йвазовский по праву находится в рейтинге самых известных художников. Его «Девятый вал» поражает своим масштабом.",
                            Name = "Иван Константинович Айвазовский",
                            StyleId = new Guid("791ddbdc-05ee-4a15-afbb-f866a978d5e7")
                        });
                });

            modelBuilder.Entity("Model.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe0f989d-1eb9-467e-8fbf-c783d70171bc"),
                            Name = "Эксмо"
                        },
                        new
                        {
                            Id = new Guid("94834ccb-a363-4566-bf2c-d73ff9ba958f"),
                            Name = "Детская литература"
                        },
                        new
                        {
                            Id = new Guid("5ec79a9a-93ac-4956-861e-ccfa8696e13d"),
                            Name = "Азбука"
                        },
                        new
                        {
                            Id = new Guid("6a8c18f9-b8c3-4964-8494-81c26d6af209"),
                            Name = "Вече"
                        },
                        new
                        {
                            Id = new Guid("b9af4688-e273-4676-a92a-656023a2d216"),
                            Name = "Рипол Классик"
                        },
                        new
                        {
                            Id = new Guid("3f755440-89bf-4335-99a7-db1d9226d666"),
                            Name = "Амфора"
                        });
                });

            modelBuilder.Entity("Model.Entities.References.CoverType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("CoverTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3ff3c04-893a-40bc-9854-1c2ba98c8265"),
                            Name = "Мягкая бумажная"
                        },
                        new
                        {
                            Id = new Guid("56d180ca-f9bd-4dad-87ef-af334f636be1"),
                            Name = "Твердая бумажная"
                        },
                        new
                        {
                            Id = new Guid("fc4519df-a67d-4686-904b-4ee105f37d22"),
                            Name = "Мягкая картонная"
                        },
                        new
                        {
                            Id = new Guid("47b06aac-5e4a-4541-b1b6-dcb5ec8f69dc"),
                            Name = "Твердая картонная"
                        },
                        new
                        {
                            Id = new Guid("07b46856-7089-4d71-a07a-40068f79ff2d"),
                            Name = "Мягкая стеклянная"
                        },
                        new
                        {
                            Id = new Guid("33aa3511-8c70-4e19-9719-321d4b79f588"),
                            Name = "Твердая стеклянная"
                        },
                        new
                        {
                            Id = new Guid("6804baa3-f2fe-4062-84e1-e3d636ade0d7"),
                            Name = "Мягкая глянцевая"
                        },
                        new
                        {
                            Id = new Guid("f586ce45-08d0-46a5-931a-7a10fdab654d"),
                            Name = "Твердая глянцевая"
                        });
                });

            modelBuilder.Entity("Model.Entities.References.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e8e4d3c5-1bd3-44f2-9120-5c39e44c553f"),
                            Name = "Фантастика"
                        },
                        new
                        {
                            Id = new Guid("7fb2db94-ebb6-4235-a3e5-182e735b8bf8"),
                            Name = "Научная фантастика"
                        },
                        new
                        {
                            Id = new Guid("cc169b1e-d765-4186-8d2a-7b52700c6920"),
                            Name = "Вестерн"
                        },
                        new
                        {
                            Id = new Guid("e36af307-b334-4074-91b4-c2e14d043743"),
                            Name = "Роман"
                        },
                        new
                        {
                            Id = new Guid("29c1b4ad-05e6-4752-ba67-47dc45a0fe46"),
                            Name = "Триллер"
                        },
                        new
                        {
                            Id = new Guid("a333d616-ee40-4f7c-a08f-f6542bacc1e1"),
                            Name = "Мистика"
                        },
                        new
                        {
                            Id = new Guid("4edb8ea0-d704-4e41-babb-c90017b0abed"),
                            Name = "Детектив"
                        },
                        new
                        {
                            Id = new Guid("cfb89ffe-f0c9-4821-a499-2fcaf38fca16"),
                            Name = "Антиутопия"
                        },
                        new
                        {
                            Id = new Guid("7bb337b5-6b47-4613-8657-6f78506fe117"),
                            Name = "Мемуары"
                        },
                        new
                        {
                            Id = new Guid("081e6e09-02df-4942-b799-c7235de02793"),
                            Name = "Биография"
                        },
                        new
                        {
                            Id = new Guid("8171d6b3-425a-40d9-a7dc-0bf26d3576bc"),
                            Name = "Пьеса"
                        },
                        new
                        {
                            Id = new Guid("29388b16-5322-4b77-bd19-eb6844a05e27"),
                            Name = "Мьюзикл"
                        },
                        new
                        {
                            Id = new Guid("0adc9006-ccc6-4d89-87ae-f9373d08152f"),
                            Name = "Сатира"
                        },
                        new
                        {
                            Id = new Guid("2916347b-080c-4196-8585-6de05fbc430f"),
                            Name = "Хайку"
                        },
                        new
                        {
                            Id = new Guid("7cf21233-4caf-4902-bcc1-85a677bf1c59"),
                            Name = "Ужасы"
                        },
                        new
                        {
                            Id = new Guid("6aed17e9-b4f9-4997-b115-6da1dfdcca80"),
                            Name = "Классика"
                        });
                });

            modelBuilder.Entity("Model.Entities.References.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("67cbe600-e220-42c5-b526-6fe821476273"),
                            Name = "Английский"
                        },
                        new
                        {
                            Id = new Guid("f1f085b5-689c-4675-ad84-4f47a5d0883e"),
                            Name = "Немецкий"
                        },
                        new
                        {
                            Id = new Guid("08fee749-b64b-4815-823a-b36b1ab6371e"),
                            Name = "Русский"
                        },
                        new
                        {
                            Id = new Guid("ae0cf116-c244-4997-93cd-f7760a93fe0f"),
                            Name = "Японский"
                        },
                        new
                        {
                            Id = new Guid("3206ceea-d1f4-4659-a0cd-3f7b5100c73d"),
                            Name = "Китайский"
                        },
                        new
                        {
                            Id = new Guid("90b9df3b-581f-4f92-adee-251630a72a9e"),
                            Name = "Бразильский"
                        },
                        new
                        {
                            Id = new Guid("8d13a346-389b-48b3-9299-a565bf2a6658"),
                            Name = "Французский"
                        },
                        new
                        {
                            Id = new Guid("02a20c75-b5ce-4c81-8fd4-02ba505aca1a"),
                            Name = "Португальский"
                        });
                });

            modelBuilder.Entity("Model.Entities.References.PainterStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PainterStyles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("018c691d-5f4a-47fe-8fee-19d45877dabd"),
                            Name = "Абстракция"
                        },
                        new
                        {
                            Id = new Guid("fe4bb701-b2c2-40b5-ae4e-4e46edad36d1"),
                            Name = "Абстракция Импрессионизм"
                        },
                        new
                        {
                            Id = new Guid("6801a5c4-fc35-468d-884f-75af47a288d6"),
                            Name = "Авангард"
                        },
                        new
                        {
                            Id = new Guid("603e8dca-6fe7-440a-821a-a27086742778"),
                            Name = "Академизм"
                        },
                        new
                        {
                            Id = new Guid("791ddbdc-05ee-4a15-afbb-f866a978d5e7"),
                            Name = "Искусство действия"
                        },
                        new
                        {
                            Id = new Guid("d680babb-53dc-430e-a267-11669c07fa5c"),
                            Name = "Империализм"
                        },
                        new
                        {
                            Id = new Guid("d6247b75-b2fc-4c7f-926c-bf2e0b011cf0"),
                            Name = "Аналитический кубизм"
                        },
                        new
                        {
                            Id = new Guid("e2dec289-43bb-4087-9b67-bfde445587db"),
                            Name = "Аналитическое искусство"
                        },
                        new
                        {
                            Id = new Guid("27078d1d-666a-4827-8f61-2683ae305f4d"),
                            Name = "Анахронизм"
                        },
                        new
                        {
                            Id = new Guid("af18c5dc-800c-485b-ab1a-16b15dcded18"),
                            Name = "Подземный"
                        },
                        new
                        {
                            Id = new Guid("f0c8630d-2e1b-4536-b0d1-f2e4a0e1da81"),
                            Name = "Модерн"
                        },
                        new
                        {
                            Id = new Guid("a713584e-be49-4b35-8dac-c114213c1a2b"),
                            Name = "Арт-Брут"
                        },
                        new
                        {
                            Id = new Guid("b08f1f01-d09c-42c7-9a6d-4e355c3fb599"),
                            Name = "Бедное искусство"
                        },
                        new
                        {
                            Id = new Guid("128bc5f7-3842-4a74-91d0-dd62064f9802"),
                            Name = "Арт-Деко"
                        });
                });

            modelBuilder.Entity("Model.Entities.References.WorkShedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<byte>("Weekday")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.ToTable("WorkShedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("905d9ed8-0bd5-402a-be16-73c021176c78"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("da0a5d81-8a06-495e-be79-71cc5973b2b7"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)2
                        },
                        new
                        {
                            Id = new Guid("39e04286-1a37-4e7e-b00e-5b255b83fc10"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("b3e031f0-73c0-4d37-94a9-bd82339882d8"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("d549b3f0-775b-45af-b425-d207b5afb637"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("e1137b08-edf1-4159-b0a1-0484e28eac72"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)6
                        },
                        new
                        {
                            Id = new Guid("e416bca8-0534-42a2-9002-46b3bf016d44"),
                            EndTime = new TimeSpan(0, 14, 0, 0, 0),
                            ShopId = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)7
                        },
                        new
                        {
                            Id = new Guid("d8fa07de-df5d-46e6-abe1-eb3552f083f4"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("f99f1587-e3b0-4ac7-8b97-a552b2bb9423"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)2
                        },
                        new
                        {
                            Id = new Guid("2b832724-0faa-4e71-9af5-373052d6c368"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("d5d62b05-72c2-45ec-841a-3f1fb3c05938"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("17a51ded-63d8-4eb7-9286-cced1e0a03ce"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            StartTime = new TimeSpan(0, 7, 30, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("e750f5d4-b698-4196-8337-4551a672a4f4"),
                            EndTime = new TimeSpan(0, 16, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            Weekday = (byte)1
                        },
                        new
                        {
                            Id = new Guid("5bab269a-e2be-45d1-a867-ea7295bb6671"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            Weekday = (byte)3
                        },
                        new
                        {
                            Id = new Guid("f4c53bb7-ff07-4be6-8657-72c5e54ed18d"),
                            EndTime = new TimeSpan(0, 20, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Weekday = (byte)4
                        },
                        new
                        {
                            Id = new Guid("49efd4d4-624f-4a55-bf22-198b9e6924ac"),
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 8, 0, 0, 0),
                            Weekday = (byte)5
                        },
                        new
                        {
                            Id = new Guid("39dc4a1a-0bfc-4c7c-8d6b-77274d0d2947"),
                            EndTime = new TimeSpan(0, 15, 0, 0, 0),
                            ShopId = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            StartTime = new TimeSpan(0, 9, 0, 0, 0),
                            Weekday = (byte)6
                        });
                });

            modelBuilder.Entity("Model.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Shops");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cab1c429-3a2d-4e30-b8a4-f9281b71ed7e"),
                            Address = "Советская 65",
                            Name = "Книжная штучка"
                        },
                        new
                        {
                            Id = new Guid("c99eca84-3aa1-4a38-abe2-6b551571246d"),
                            Address = "Мира 22",
                            Name = "Большая закладка"
                        },
                        new
                        {
                            Id = new Guid("bd0f8083-8072-4a25-8d13-90a85f2caeca"),
                            Address = "Маркса проспект 3",
                            Name = "Скрытая обложка"
                        },
                        new
                        {
                            Id = new Guid("27cf46b3-a2aa-4351-af82-e33f36f1c553"),
                            Address = "Заельцовская 123",
                            Name = "Глубокий кошелек"
                        },
                        new
                        {
                            Id = new Guid("06c5d83e-ac7f-4c4c-8ad5-79bb9e914ef8"),
                            Address = "Красный проспект 234",
                            Name = "Звенящий брелок"
                        },
                        new
                        {
                            Id = new Guid("905d9ed8-0bd5-402a-be16-73c021176c78"),
                            Address = "Революции 89",
                            Name = "Теплый носок"
                        });
                });

            modelBuilder.Entity("Model.Entities.Book", b =>
                {
                    b.HasOne("Model.Entities.References.CoverType", "CoverType")
                        .WithMany()
                        .HasForeignKey("CoverTypeId");

                    b.HasOne("Model.Entities.References.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId");

                    b.HasOne("Model.Entities.References.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");

                    b.HasOne("Model.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId");
                });

            modelBuilder.Entity("Model.Entities.JoinTables.AuthorBook", b =>
                {
                    b.HasOne("Model.Entities.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.JoinTables.InterpreterBook", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany("InterpreterBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Interpreter", "Interpreter")
                        .WithMany("InterpreterBooks")
                        .HasForeignKey("InterpreterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.JoinTables.PainterBook", b =>
                {
                    b.HasOne("Model.Entities.Book", "Book")
                        .WithMany("PainterBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Painter", "Painter")
                        .WithMany("PainterBooks")
                        .HasForeignKey("PainterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Entities.Painter", b =>
                {
                    b.HasOne("Model.Entities.References.PainterStyle", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");
                });

            modelBuilder.Entity("Model.Entities.References.WorkShedule", b =>
                {
                    b.HasOne("Model.Entities.Shop", "Shop")
                        .WithMany("WorkShedule")
                        .HasForeignKey("ShopId");
                });
#pragma warning restore 612, 618
        }
    }
}
